module Utils
  class Pagination
    PAGE_DEFAULT_SETTINGS: ::Hash[::Symbol, ::Integer | ::String]

    def self.paginate: (::Hash[Symbol, (String | Integer)] params, collection: (::Entities::Inventory::ActiveRecord_Relation | Array[(Hash[String | Symbol, untype])])) -> untyped

    def build_paginate: () -> (Array[(Hash[String | Symbol, untype])] | ::Entities::Inventory::ActiveRecord_Relation | Errors::ParameterValidationError)

    private

    attr_reader params: Hash[Symbol, (String | Integer)]

    attr_reader collection: (Array[(Hash[String | Symbol, untype])] | ::Entities::Inventory::ActiveRecord_Relation)

    attr_reader validator: ::Validators::Contracts::PaginationParams

    attr_reader logger: Logger

    def initialize: (
        Hash[Symbol, (String | Integer)] params,
        (Array[(Hash[String | Symbol, untype])] | ::Entities::Inventory::ActiveRecord_Relation) collection,
        ::Validators::Contracts::PaginationParams validator, Logger logger
    ) -> Utils::Pagination

    def paginate_active_record: (::Hash[Symbol, (String | Integer)] args) -> ::Entities::Inventory::ActiveRecord_Relation

    def collection_klass_name: () -> String

    def paginate_array: (::Hash[Symbol, (String | Integer)] args) -> Array[::Hash[String | Symbol, String | Integer]])

    def validate_params: () -> Dry::Monad::Result

    def sanitize_params: (::Hash[Symbol, (String | Integer)] args) -> { page: Integer, per_page: Integer, order: String }
  end
end
